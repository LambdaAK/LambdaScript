let rec fold <-
  \op ->
  \acc ->
  \arr ->
  switch arr =>
  | [] -> acc
  | h :: t -> fold op t (op acc h)
  end

let rec map <-
  \f ->
  \lst ->
  switch lst =>
  | [] -> []
  | h :: t -> f h :: map f t
  end

let rec iter <-
  \f ->
  \lst ->
  switch lst =>
  | [] -> ()
  | h :: t -> 
    let () <- f h in
    iter f t
  end

let fold <- let rec fold op acc arr <-
  switch arr =>
  | [] -> acc
  | h :: t -> op h (fold op t acc)
  end
in
fold

