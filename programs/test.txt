let rec fold op acc arr <-
  switch arr =>
  | [] -> acc
  | h :: t -> fold op t (op acc h)
  end

let rec map f lst <-
  switch lst =>
  | [] -> []
  | h :: t -> f h :: map f t
  end

let rec iter f lst <-
  switch lst =>
  | [] -> ()
  | h :: t -> 
    let () <- f h in
    iter f t
  end

let rec (++) arr1 arr2 <-
  switch arr1 =>
  | [] -> arr2
  | h :: t -> h :: (t ++ arr2)
  end

let rec flatten lst <-
  switch lst =>
  | [] -> []
  | h :: t -> h ++ flatten t
  end

let print_int x <-
  println (int_to_str x)

let print_int_list <- iter print_int

let return x <- [x]

let (>>=) lst f <-
  flatten (map f lst)

let (-->) x f <- f x

let (<->) f g x <- f (g x)


let id <- ((+) 1) <-> (\x -> x - 1)

let squares a b <- [x * x | x <- [a ... b]]


